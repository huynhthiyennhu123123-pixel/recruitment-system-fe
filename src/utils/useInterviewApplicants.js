// src/utils/useInterviewApplicants.js
import { useState, useEffect } from "react"
import {
  getInterviewParticipants,
  getInterviewById,
} from "../services/interviewService"
import { getManagedApplications } from "../services/employerService"
import { toast } from "react-toastify"

export const useInterviewApplicants = (interview) => {
  const [participants, setParticipants] = useState([])
  const [applicants, setApplicants] = useState([])
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    if (!interview?.id) return
    setLoading(true)

    const fetchData = async () => {
      try {
        // üß© 1Ô∏è‚É£ L·∫•y chi ti·∫øt ph·ªèng v·∫•n
        const intvRes = await getInterviewById(interview.id)
        const intvData = intvRes?.data?.data
        const applicationId = intvData?.applicationId
        if (!applicationId) {
          console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y applicationId trong bu·ªïi ph·ªèng v·∫•n.")
          setApplicants([])
          setLoading(false)
          return
        }

        // üß© 2Ô∏è‚É£ L·∫•y danh s√°ch ng∆∞·ªùi tham gia (userId, role)
        const res = await getInterviewParticipants(interview.id)
        const participantList = res?.data?.data || []

        // üß© 3Ô∏è‚É£ L·∫•y to√†n b·ªô ·ª©ng vi√™n employer qu·∫£n l√Ω
        const appsRes = await getManagedApplications(0, 100)
        const allApps =
          appsRes?.data?.data?.content ||
          appsRes?.data?.content ||
          []

        // üîç T√¨m jobPostingId c·ªßa bu·ªïi ph·ªèng v·∫•n hi·ªán t·∫°i
        const currentApp = allApps.find((a) => a.id === applicationId)
        const jobPostingId = currentApp?.jobPosting?.id

        if (!jobPostingId) {
          console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y jobPostingId t·ª´ application.")
          setApplicants([])
          setLoading(false)
          return
        }

        // üß© 4Ô∏è‚É£ Gh√©p th√¥ng tin ·ª©ng vi√™n v√†o participants
        const formattedParticipants = participantList.map((p) => {
          const matchApp = allApps.find((a) => a.applicant?.id === p.userId)
          return {
            id: p.userId,
            name: matchApp?.applicant?.fullName || `·ª®ng vi√™n #${p.userId}`,
            email: matchApp?.applicant?.email || "Kh√¥ng c√≥ email",
            jobTitle: matchApp?.jobPosting?.title || "Ch∆∞a x√°c ƒë·ªãnh",
            role: p.role,
          }
        })
        setParticipants(formattedParticipants)

        // üß© 5Ô∏è‚É£ L·ªçc ra ·ª©ng vi√™n c√πng job m√† ch∆∞a ƒë∆∞·ª£c th√™m v√†o participants
        const filtered = allApps.filter(
          (a) =>
            a.jobPosting?.id === jobPostingId &&
            a.status === "INTERVIEW" &&
            !participantList.some((p) => p.userId === a.applicant?.id)
        )

        const formattedApplicants = filtered.map((a) => ({
          id: a.applicant?.id,
          applicantName: a.applicant?.fullName,
          applicantEmail: a.applicant?.email,
          jobTitle: a.jobPosting?.title,
        }))
        setApplicants(formattedApplicants)
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi tham gia:", err)
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ·ª©ng vi√™n.")
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [interview])

  return { participants, applicants, setParticipants, setApplicants, loading }
}
