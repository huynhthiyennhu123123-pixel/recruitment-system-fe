import React, { useEffect, useState } from "react"
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Checkbox,
  IconButton,
  CircularProgress,
  Typography,
  Divider,
  Box,
  Tooltip,
} from "@mui/material"
import DeleteIcon from "@mui/icons-material/Delete"
import { getManagedApplications, getApplicationById } from "../../services/employerService"
import { addParticipants, removeParticipants, cancelInterview } from "../../services/interviewService"
import { toast } from "react-toastify"

export default function ParticipantModal({ open, onClose, interview, onUpdated }) {
  const [loading, setLoading] = useState(true)
  const [applicants, setApplicants] = useState([]) // ·ª©ng vi√™n c√≥ th·ªÉ th√™m
  const [participants, setParticipants] = useState([]) // ·ª©ng vi√™n hi·ªán t·∫°i
  const [selectedIds, setSelectedIds] = useState(new Set())

  // üß© 1Ô∏è‚É£ L·∫•y danh s√°ch ·ª©ng vi√™n hi·ªán t·∫°i
  useEffect(() => {
    if (!open || !interview?.applicationId) return

    const fetchCurrentParticipants = async () => {
      try {
        const res = await getApplicationById(interview.applicationId)
        const applicant = res?.data?.applicant
        const job = res?.data?.jobPosting

        if (applicant) {
          setParticipants([
            {
              id: applicant.id,
              name:
                applicant.fullName ||
                `${applicant.firstName || ""} ${applicant.lastName || ""}`.trim(),
              email: applicant.email,
              jobTitle: job?.title || "Kh√¥ng r√µ v·ªã tr√≠",
              role: "APPLICANT",
            },
          ])
        }

        if (!interview.jobPostingId && job?.id) {
          interview.jobPostingId = job.id
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y ·ª©ng vi√™n c·ªßa cu·ªôc ph·ªèng v·∫•n:", err)
        toast.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ·ª©ng vi√™n hi·ªán t·∫°i.")
      }
    }

    fetchCurrentParticipants()
  }, [open, interview])

  // üß© 2Ô∏è‚É£ L·∫•y danh s√°ch ·ª©ng vi√™n c√≥ th·ªÉ th√™m
  useEffect(() => {
    if (!open) return
    setLoading(true)

    if (!interview?.jobPostingId) {
      console.warn("‚ùó Thi·∫øu jobPostingId trong interview object")
      setApplicants([])
      setLoading(false)
      return
    }

    const fetchApplicants = async () => {
      try {
        const res = await getManagedApplications(0, 100, "INTERVIEW", interview.jobPostingId)
        const list = res?.data?.content || []
        const filtered = list.filter(
          (a) => !participants.some((p) => p.id === a.applicant?.id)
        )
        setApplicants(filtered)
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i ·ª©ng vi√™n INTERVIEW:", err)
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ·ª©ng vi√™n ph·ªèng v·∫•n c√πng c√¥ng vi·ªác.")
      } finally {
        setLoading(false)
      }
    }

    fetchApplicants()
  }, [open, interview, participants])

  // ‚úÖ 3Ô∏è‚É£ Tick ch·ªçn ·ª©ng vi√™n ƒë·ªÉ th√™m
  const handleToggle = (id) => {
    setSelectedIds((prev) => {
      const newSet = new Set(prev)
      newSet.has(id) ? newSet.delete(id) : newSet.add(id)
      return newSet
    })
  }

  // ‚úÖ 4Ô∏è‚É£ Th√™m ·ª©ng vi√™n
  const handleAdd = async () => {
    if (selectedIds.size === 0) {
      toast.warn("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ·ª©ng vi√™n ƒë·ªÉ th√™m v√†o ph·ªèng v·∫•n.")
      return
    }

    try {
      const userIds = Array.from(selectedIds)
      const res = await addParticipants(interview.id, { userIds, role: "APPLICANT" })
      if (res?.success || res?.data?.success) {
        toast.success("üéâ ƒê√£ th√™m ·ª©ng vi√™n v√†o bu·ªïi ph·ªèng v·∫•n th√†nh c√¥ng!")
        const newlyAdded = applicants
          .filter((a) => selectedIds.has(a.id))
          .map((a) => ({
            id: a.id,
            name: a.applicantName,
            email: a.applicantEmail,
            jobTitle: a.jobTitle,
            role: "APPLICANT",
          }))
        setParticipants((prev) => [...prev, ...newlyAdded])
        setApplicants((prev) => prev.filter((a) => !selectedIds.has(a.id)))
        setSelectedIds(new Set())
        onUpdated?.()
      } else {
        toast.error(res?.message || "Kh√¥ng th·ªÉ th√™m ·ª©ng vi√™n.")
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi th√™m ·ª©ng vi√™n:", err)
      toast.error("L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i.")
    }
  }

  const handleRemove = async (userId) => {
  try {
    await removeParticipants(interview.id, { userIds: [userId] })
    toast.success("ƒê√£ x√≥a ·ª©ng vi√™n kh·ªèi bu·ªïi ph·ªèng v·∫•n.")

    const removed = participants.find((p) => p.id === userId)
    const newList = participants.filter((p) => p.id !== userId)
    setParticipants(newList)

    if (removed) {
      setApplicants((prev) => [
        ...prev,
        {
          id: removed.id,
          applicantName: removed.name,
          applicantEmail: removed.email,
          jobTitle: removed.jobTitle,
        },
      ])
    }

    // ‚ö° N·∫øu kh√¥ng c√≤n ·ª©ng vi√™n n√†o ‚Üí g·ªçi API H·ª¶Y ph·ªèng v·∫•n
    if (newList.length === 0) {
      try {
        await cancelInterview(interview.id, { reason: "Kh√¥ng c√≤n ·ª©ng vi√™n n√†o tham gia" })
        toast.info("üü° Bu·ªïi ph·ªèng v·∫•n ƒë√£ ƒë∆∞·ª£c h·ªßy v√¨ kh√¥ng c√≤n ·ª©ng vi√™n n√†o.")
        onUpdated?.()
        onClose()
      } catch (err) {
        console.error("‚ùå L·ªói khi h·ªßy bu·ªïi ph·ªèng v·∫•n:", err)
        toast.error("Kh√¥ng th·ªÉ h·ªßy bu·ªïi ph·ªèng v·∫•n.")
      }
    }

    onUpdated?.()
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a ·ª©ng vi√™n:", err)
    toast.error("Kh√¥ng th·ªÉ x√≥a ·ª©ng vi√™n.")
  }
}

  // ======================================================
  // üß© UI
  // ======================================================
  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
      <DialogTitle sx={{ fontWeight: "bold", fontSize: 20, pb: 1 }}>
        üë• Qu·∫£n l√Ω ·ª©ng vi√™n tham gia ph·ªèng v·∫•n
      </DialogTitle>

      <DialogContent dividers>
        <Typography variant="subtitle1" sx={{ mb: 1, fontWeight: 600 }}>
          ·ª®ng vi√™n hi·ªán t·∫°i:
        </Typography>

        {participants.length > 0 ? (
          <List dense>
            {participants.map((p) => (
              <ListItem
                key={p.id}
                secondaryAction={
                  <Tooltip title="X√≥a ·ª©ng vi√™n kh·ªèi ph·ªèng v·∫•n">
                    <IconButton
                      edge="end"
                      color="error"
                      onClick={() => handleRemove(p.id)}
                      size="small"
                    >
                      <DeleteIcon />
                    </IconButton>
                  </Tooltip>
                }
              >
                <ListItemText
                  primary={`${p.name} ‚Äî ${p.jobTitle}`}
                  secondary={`Email: ${p.email}`}
                />
              </ListItem>
            ))}
          </List>
        ) : (
          <Typography color="text.secondary" sx={{ mb: 2 }}>
            Ch∆∞a c√≥ ·ª©ng vi√™n n√†o trong cu·ªôc ph·ªèng v·∫•n n√†y.
          </Typography>
        )}

        <Divider sx={{ my: 2 }} />

        <Typography variant="subtitle1" sx={{ mb: 1, fontWeight: 600 }}>
          Th√™m ·ª©ng vi√™n c√πng c√¥ng vi·ªác (tr·∫°ng th√°i INTERVIEW):
        </Typography>

        {loading ? (
          <Box textAlign="center" py={2}>
            <CircularProgress size={28} />
          </Box>
        ) : applicants.length === 0 ? (
          <Typography color="text.secondary">Kh√¥ng c√≥ ·ª©ng vi√™n ph√π h·ª£p.</Typography>
        ) : (
          <List dense>
            {applicants.map((a) => (
              <ListItem
                key={a.id}
                button
                onClick={() => handleToggle(a.id)}
                sx={{
                  borderRadius: 1,
                  "&:hover": { backgroundColor: "#f9fafb" },
                }}
              >
                <ListItemIcon>
                  <Checkbox
                    checked={selectedIds.has(a.id)}
                    tabIndex={-1}
                    disableRipple
                    color="success"
                  />
                </ListItemIcon>
                <ListItemText
                  primary={`${a.applicantName} ‚Äî ${a.jobTitle}`}
                  secondary={`Email: ${a.applicantEmail || "Kh√¥ng c√≥"}`}
                />
              </ListItem>
            ))}
          </List>
        )}
      </DialogContent>

      <DialogActions sx={{ justifyContent: "space-between", px: 3 }}>
        <Button onClick={onClose} color="inherit">
          ƒê√≥ng
        </Button>
        <Button
          variant="contained"
          color="success"
          onClick={handleAdd}
          disabled={selectedIds.size === 0}
        >
          L∆∞u thay ƒë·ªïi
        </Button>
      </DialogActions>
    </Dialog>
  )
}
